// This grammar implements the GraphQL spec,
// plus the following extension:
// - #import syntax


// B.3 Lexical Tokens

WHITESPACE = _{ "\u{FEFF}" | "\u{0009}" | " " | NEWLINE | "," }
COMMENT = _{ "#" ~ !(&ext_KEYWORD_import ~ ext_ImportStatementContent) ~ CommentCharacter* ~ NEWLINE }
CommentCharacter = { !NEWLINE ~ ANY }

Token = { Punctuator | Name | IntValue | FloatValue | StringValue }
Punctuator = { "!" | "$" | "&" | "(" | ")" | "..." | ":" | "=" | "@" | "[" | "]" | "{" | "|" | "}" }
Name = @{ NameStart ~ NameContinue* }
NameStart = @{ ASCII_ALPHA | "_" }
NameContinue = @{ ASCII_ALPHANUMERIC | "_" }

IntValue = @{ IntegerPart ~ !("." | NameStart) }
IntegerPart = @{ "-"? ~ ( "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)) }

FloatValue = @{
  (IntegerPart ~ FractionalPart ~ ExponentPart ~ !("." | NameStart) ) |
  (IntegerPart ~ FractionalPart ~ !("." | NameStart) ) |
  (IntegerPart ~ ExponentPart ~ !("." | NameStart) )
}
FractionalPart = @{ "." ~ ASCII_DIGIT* }
ExponentPart = @{ ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+ }

StringValue = ${ EmptyStringValue | NormalStringValue | BlockStringValue }
EmptyStringValue = @{ "\"\"" ~ !("\"") }
BlockStringValue = @{ "\"\"\"" ~ BlockStringCharacter* ~ "\"\"\"" }
NormalStringValue = ${ "\"" ~ StringCharacter+ ~ "\"" }
StringCharacter = ${
  EscapedUnicodeBrace |
  EscapedUnicode4 |
  EscapedCharacter | 
  NormalStringCharacter
}
BlockStringCharacter = @{
  !"\"\"\"" ~
  ("\\\"\"\"" | ANY)
}

EscapedUnicodeBrace = ${ "\\u" ~ "{" ~ EscapedUnicodeBraceDigits ~ "}" }
EscapedUnicodeBraceDigits = @{ ASCII_HEX_DIGIT+ }
EscapedUnicode4 = @{ "\\u" ~ ASCII_HEX_DIGIT{4} }
EscapedCharacter = @{ "\\" ~ ("\"" | "\\" | "/"	| "b" | "f" | "n" | "r" | "t") }
NormalStringCharacter = @{ !("\"" | "\\" | NEWLINE ) ~ ANY }

// keywords
KEYWORD_query = @{ "query" ~ !NameContinue }
KEYWORD_mutation = @{ "mutation" ~ !NameContinue }
KEYWORD_subscription = @{ "subscription" ~ !NameContinue }
KEYWORD_fragment = @{ "fragment" ~ !NameContinue }
KEYWORD_on = @{ "on" ~ !NameContinue }
KEYWORD_true = @{ "true" ~ !NameContinue }
KEYWORD_false = @{ "false" ~ !NameContinue }
KEYWORD_null = @{ "null" ~ !NameContinue }
KEYWORD_extend = @{ "extend" ~ !NameContinue }
KEYWORD_schema = @{ "schema" ~ !NameContinue }
KEYWORD_scalar = @{ "scalar" ~ !NameContinue }
KEYWORD_type = @{ "type" ~ !NameContinue }
KEYWORD_implements = @{ "implements" ~ !NameContinue }
KEYWORD_interface = @{ "interface" ~ !NameContinue }
KEYWORD_union = @{ "union" ~ !NameContinue }
KEYWORD_enum = @{ "enum" ~ !NameContinue }
KEYWORD_input = @{ "input" ~ !NameContinue }
KEYWORD_directive = @{ "directive" ~ !NameContinue }
KEYWORD_repeatable = @{ "repeatable" ~ !NameContinue }
ext_KEYWORD_import = @{ "import" ~ !NameContinue }
ext_KEYWORD_from = @{ "from" ~ !NameContinue }

// punctuations
PUNC_equal = { "=" }
PUNC_open_brace = { "{" }
PUNC_close_brace = { "}" }

// B.4 Document Syntax

// Document = { Definition+ }
// Definition = { ExecutableDefinition | TypeSystemDefinitionOrExtension }

ExecutableDocument = { SOI ~ ExecutableDefinition+ ~ EOI }

ExecutableDefinition = { OperationDefinition | FragmentDefinition | ext_ImportStatement }
OperationDefinition = {
  OperationType ~ Name? ~ VariablesDefinition? ~ Directives? ~ SelectionSet | SelectionSet
}

OperationType = { KEYWORD_query | KEYWORD_mutation| KEYWORD_subscription }
SelectionSet = { "{" ~ Selection+ ~ "}"}

Selection = { Field | FragmentSpread | InlineFragment }

Field = { Alias? ~ Name ~ Arguments? ~ Directives? ~ SelectionSet? }
Alias = { Name ~ ":" }
Arguments = { "(" ~ Argument+ ~ ")" }
Argument = { Name ~ ":" ~ Value }

FragmentSpread = { "..." ~ FragmentName ~ Directives? }
InlineFragment = { "..." ~ TypeCondition? ~ Directives? ~ SelectionSet }

FragmentDefinition = { KEYWORD_fragment ~ FragmentName ~ TypeCondition ~ Directives? ~ SelectionSet }

FragmentName = { !KEYWORD_on ~ Name }
TypeCondition = { KEYWORD_on ~ NamedType }

Value = {
  Variable |
  IntValue |
  FloatValue |
  StringValue |
  BooleanValue |
  NullValue |
  EnumValue |
  ListValue |
  ObjectValue
}

BooleanValue = { KEYWORD_true | KEYWORD_false }
NullValue = { KEYWORD_null }
EnumValue = { !(KEYWORD_true | KEYWORD_false | KEYWORD_null) ~ Name }

ListValue = {
  "[" ~ "]" |
  "[" ~ Value+ ~ "]"
}
ObjectValue = {
  "{" ~ "}" |
  "{" ~ ObjectField+ ~ "}"
}
ObjectField = { Name ~ ":" ~ Value }

VariablesDefinition = { "(" ~ VariableDefinition+ ~ ")" }
VariableDefinition = { Variable ~ ":" ~ Type ~ DefaultValue? ~ Directives? }

Variable = { "$" ~ Name }

DefaultValue = { "=" ~ Value }

Type = { NonNullType | NamedType | ListType }
NamedType = { Name }
ListType = { "[" ~ Type ~ "]" }
NonNullType = { (NamedType ~ "!") | (ListType ~ "!") }

Directives = { Directive+ }
Directive = { "@" ~ Name ~ Arguments? }


TypeSystemExtensionDocument = { SOI ~ TypeSystemDefinitionOrExtension+ ~ EOI }

TypeSystemDefinitionOrExtension = { TypeSystemDefinition | TypeSystemExtension }
TypeSystemDefinition = { SchemaDefinition | TypeDefinition | DirectiveDefinition }
TypeSystemExtension = { SchemaExtension | TypeExtension }

SchemaDefinition = { Description? ~ KEYWORD_schema ~ Directives? ~ RootOperationTypeDefinitions }
SchemaExtension = {
  (KEYWORD_extend ~ KEYWORD_schema ~ Directives? ~ RootOperationTypeDefinitions) |
  (KEYWORD_extend ~ KEYWORD_schema ~ Directives ~ !"{")
}

RootOperationTypeDefinitions = { "{" ~ RootOperationTypeDefinition+ ~ "}" }
RootOperationTypeDefinition = { OperationType ~ ":" ~ NamedType }
Description = { StringValue }

TypeDefinition = {
  ScalarTypeDefinition |
  ObjectTypeDefinition |
  InterfaceTypeDefinition |
  UnionTypeDefinition |
  EnumTypeDefinition |
  InputObjectTypeDefinition
}

TypeExtension = {
  ScalarTypeExtension |
  ObjectTypeExtension |
  InterfaceTypeExtension |
  UnionTypeExtension |
  EnumTypeExtension |
  InputObjectTypeExtension
}

ScalarTypeDefinition = { Description? ~ KEYWORD_scalar ~ Name ~ Directives? }
ScalarTypeExtension = { KEYWORD_extend ~ KEYWORD_scalar ~ Name ~ Directives? }

ObjectTypeDefinition = {
  Description? ~ KEYWORD_type ~ Name ~ ImplementsInterfaces? ~ Directives? ~ FieldsDefinition |
  Description? ~ KEYWORD_type ~ Name ~ ImplementsInterfaces? ~ Directives ~ !("{")
}
ObjectTypeExtension = {
  KEYWORD_extend ~ KEYWORD_type ~ Name ~ ImplementsInterfaces? ~ Directives? ~ FieldsDefinition |
  KEYWORD_extend ~ KEYWORD_type ~ Name ~ ImplementsInterfaces? ~ Directives ~ !("{") |
  KEYWORD_extend ~ KEYWORD_type ~ Name ~ ImplementsInterfaces ~ !("{")
}

ImplementsInterfaces = { KEYWORD_implements ~ "&"? ~ NamedType ~ ("&" ~ NamedType)* }

FieldsDefinition = { "{" ~ FieldDefinition+ ~ "}" }
FieldDefinition = { Description? ~ Name ~ ArgumentsDefinition? ~ ":" ~ Type ~ Directives? }

ArgumentsDefinition = { "(" ~ InputValueDefinition+ ~ ")" }

InputValueDefinition = { Description? ~ Name ~ ":" ~ Type ~ DefaultValue? ~ Directives? }

InterfaceTypeDefinition = {
  Description? ~ KEYWORD_interface ~ Name ~ ImplementsInterfaces? ~ Directives? ~ FieldsDefinition |
  Description? ~ KEYWORD_interface ~ Name ~ ImplementsInterfaces? ~ Directives? ~ !"{"
}
InterfaceTypeExtension = {
  KEYWORD_extend ~ KEYWORD_interface ~ Name ~ ImplementsInterfaces? ~ Directives? ~ FieldsDefinition |
  KEYWORD_extend ~ KEYWORD_interface ~ Name ~ ImplementsInterfaces? ~ Directives? ~ !"{" |
  KEYWORD_extend ~ KEYWORD_interface ~ Name ~ ImplementsInterfaces ~ !"{"
}

UnionTypeDefinition = { Description? ~ KEYWORD_union ~ Name ~ Directives? ~ "=" ~ UnionMemberTypes? }
UnionMemberTypes = { "|"? ~ NamedType ~ ("|" ~ NamedType)* }
UnionTypeExtension = {
  KEYWORD_extend ~ KEYWORD_union ~ Name ~ Directives? ~ "=" ~ UnionMemberTypes |
  KEYWORD_extend ~ KEYWORD_union ~ Name ~ Directives
}

EnumTypeDefinition = {
  Description? ~ KEYWORD_enum ~ Name ~ Directives? ~ EnumValuesDefinition |
  Description? ~ KEYWORD_enum ~ Name ~ Directives? ~ !"{"
}
EnumValuesDefinition = { "{" ~ EnumValueDefinition+ ~ "}" }
EnumValueDefinition = { Description? ~ EnumValue ~ Directives? }
EnumTypeExtension = {
  KEYWORD_extend ~ KEYWORD_enum ~ Name ~ Directives? ~ EnumValuesDefinition |
  KEYWORD_extend ~ KEYWORD_enum ~ Name ~ Directives? ~ !"{"
}

InputObjectTypeDefinition = {
  Description? ~ KEYWORD_input ~ Name ~ Directives? ~ InputFieldsDefinition |
  Description? ~ KEYWORD_input ~ Name ~ Directives? ~ !"{"
}
InputFieldsDefinition = { "{" ~ InputValueDefinition+ ~ "}" }
InputObjectTypeExtension = {
  KEYWORD_extend ~ KEYWORD_input ~ Name ~ Directives? ~ InputFieldsDefinition |
  KEYWORD_extend ~ KEYWORD_input ~ Name ~ Directives? ~ !"{"
}

DirectiveDefinition = {
  Description? ~ KEYWORD_directive ~ "@" ~ Name ~ ArgumentsDefinition? ~ KEYWORD_repeatable? ~ KEYWORD_on ~ DirectiveLocations
}
DirectiveLocations = { "|"? ~ DirectiveLocation ~ ("|" ~ DirectiveLocation)* }
DirectiveLocation = { ExecutableDirectiveLocation | TypeSystemDirectiveLocation }
ExecutableDirectiveLocation = @{
  ("QUERY" | "MUTATION" | "SUBSCRIPTION" | "FIELD" | "FRAGMENT_DEFINITION" |
  "FRAGMENT_SPREAD" | "INLINE_FRAGMENT" | "VARIABLE_DEFINITION"
  ) ~ !NameContinue
}
TypeSystemDirectiveLocation = @{
  ("SCHEMA" | "SCALAR" | "OBJECT" | "FIELD_DEFINITION" | "ARGUMENT_DEFINITION" |
  "INTERFACE" | "UNION" | "ENUM_VALUE" | "ENUM"  | "INPUT_OBJECT" | "INPUT_FIELD_DEFINITION"
  ) ~ !NameContinue
}

ext_ImportStatement = { "#" ~ ext_ImportStatementContent }
ext_ImportStatementContent = _{ ext_KEYWORD_import ~ ext_NameOrAsterisk+ ~ ext_KEYWORD_from ~ StringValue }
ext_NameOrAsterisk = { Name | "*" }