---
source: crates/printer/src/schema_type_printer/tests/mod.rs
expression: printed
---
export type __nitrogql_schema = {
  query: Query;
};

type __Beautify<Obj> = { [K in keyof Obj]: Obj[K] } & {};
export type __SelectionSet<Orig, Obj, Others> =
  __Beautify<Pick<{
    [K in keyof Orig]: Obj extends { [P in K]?: infer V } ? V : unknown
  }, Extract<keyof Orig, keyof Obj>> & Others>;
export type ID = string;

export type String = string;

export type Int = number;

/**
 * This is User.
 */
export type User = {
  __typename: "User";
  id: ID;
  /**
   * Name of user.
   */
  name: String;
  type: UserType;
  /**
   * Age of user. User may choose to not register their age.
   */
  age: Int | null;
  posts: (Post)[];
};

export type Bot = {
  __typename: "Bot";
  id: ID;
};

export type Post = {
  __typename: "Post";
  id: ID;
  title: String;
  tags: (String)[] | null;
  body: String;
};

export type Query = {
  __typename: "Query";
  /**
   * Returns my account.
   * Note that query without authorization header results in a error.
   */
  me: User;
};

/**
 * Node that has an id field.
 */
export type HasID = User | Bot;

export type UserType = "NormalUser" | "PremiumUser";

export type UserSearchQuery = {
  readonly age?: Int | null | undefined;
  readonly name?: String | null | undefined;
};


